import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Tag } from './tag.service';
import { User } from './user.service';

// Define the structure of a Post based on BE entity
export interface Post {
  postId?: number;               // Optional because it will be generated by BE
  title: string;
  text: string;
  picture?: string;              // Optional because it may not always be provided
  status?: 'JUST_POSTED' | 'FIRST_REACTIONS' | 'OUTDATED';  // Optional, default 'JUST_POSTED' in BE
  //authorId?: number;             // ID of the user who created the post
  author: User;
  creationDateTime?: string;     // ISO string representation of LocalDateTime
  //tags?: Tag[];               // Array of tag IDs associated with the post
}

@Injectable({
  providedIn: 'root',
})
export class PostService {
  private baseUrl = 'http://localhost:9090/posts';  // Adjust the URL if needed

  constructor(private http: HttpClient) {}

  // Get all posts
  getAllPosts(): Observable<Post[]> {
    return this.http.get<Post[]>(`${this.baseUrl}/getAll`);
  }

  // Create a new post
  createPost(userId: number, post: Post): Observable<Post> {
    // Default the status to 'JUST_POSTED' when a post is created nush daca trebe asta de mai jos sau nu, will see
    //post.status = 'JUST_POSTED';
    return this.http.post<Post>(`${this.baseUrl}/create/${userId}`, post);
  }

  // Get a post by ID
  getPostById(postId: number): Observable<Post> {
    return this.http.get<Post>(`${this.baseUrl}/${postId}`);
  }

  // Get posts by a specific user
  getPostsByUserId(userId: number): Observable<Post[]> {
    return this.http.get<Post[]>(`${this.baseUrl}/getPostsByUserId/${userId}`);
  }

  // Update a post by ID
  updatePost(postId: number, post: Post): Observable<Post> {
    return this.http.put<Post>(`${this.baseUrl}/update/${postId}`, post);
  }

  // Delete a post by ID
  // post.service.ts
  deletePost(postId: number): Observable<any> {
  return this.http.delete(`http://localhost:9090/posts/delete/${postId}`, {
    responseType: 'text' // <-- this fixes the issue!
  });
}


  // Mark a post as outdated (only by the author)
  markPostAsOutdated(postId: number, userId: number): Observable<Post> {
    return this.http.put<Post>(`${this.baseUrl}/markPostAsOutdated/${postId}/${userId}`, {});
  }
}
